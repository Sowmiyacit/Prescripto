import React, { useContext, useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { toast } from 'react-toastify';
import { AppContext } from '../context/AppContext';
import { assets } from '../assets/assets_frontend/assets';
import RelatedDoctor from '../components/RelatedDoctor';

const Appointment = () => {
  const { docId } = useParams();
  const navigate = useNavigate();
  const { doctors, currentSymbol, backendUrl, token,getDoctorsData } = useContext(AppContext);
  const daysOfWeek = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
  const [docInfo, setDocInfo] = useState(null);
  const [docSlots, setDocSlots] = useState([]);
  const [slotIndex, setSlotIndex] = useState(0);
  const [slotTime, setSlotTime] = useState("");

  const fetchDocInfo = async () => {
    if (doctors && Array.isArray(doctors)) {
      const doc = doctors.find((doc) => doc._id === docId);
      setDocInfo(doc || null);
    }
  };

  const getAvailableSlots = async () => {
    setDocSlots([]);

    let today = new Date();

    for (let i = 0; i < 7; i++) {
      let currentDate = new Date(today);
      currentDate.setDate(today.getDate() + i);

      let endTime = new Date(currentDate);
      endTime.setHours(21, 0, 0, 0);

      if (today.getDate() === currentDate.getDate()) {
        currentDate.setHours(currentDate.getHours() > 10 ? currentDate.getHours() + 1 : 10);
        currentDate.setMinutes(currentDate.getMinutes() > 30 ? 30 : 0);
      } else {
        currentDate.setHours(10);
        currentDate.setMinutes(0);
      }

      let timeSlots = [];
      while (currentDate < endTime) {
        let formattedTime = currentDate.toLocaleTimeString([], {
          hour: '2-digit',
          minute: '2-digit',
        });
        let day=currentDate.getDate()
        let month=currentDate.getMonth()+1;
        let year=currentDate.getFullYear()
         
        const slotDate=day+"_"+month+"_"+year
        const slotTime=formattedTime;

        const isSlotAvailable=docInfo.slots_booked[slotDate] && docInfo.slots_booked[slotDate].includes(slotTime) ? false:true;

        if(isSlotAvailable){
          timeSlots.push({
            dateTime: new Date(currentDate),
            time: formattedTime,
          });
        }
        
        currentDate.setMinutes(currentDate.getMinutes() + 30);
      }

      setDocSlots((prev) => [...prev, timeSlots]);
    }
  };

  const bookAppointment = async () => {
    if (!token) {
      toast.warn("Login to Book Appointment");
      return navigate('/login');
    }
    else{
      try {
        const date=docSlots[slotIndex][0].dateTime
        let day=date.getDate()
        let month=date.getMonth()+1
        let year=date.getFullYear()
  
        const slotDate=day+"_"+month+"_"+year
        const {data}=await axios.post("http://localhost:4000/api/user/book-appointment",{docId,slotDate,slotTime},{headers:{token}})
        if(data.success){
          
          toast.success(data.message)
          getDoctorsData();
          navigate('/my-appointments')
        }
        else{
          
          toast.error(data.message)
        }
      } catch (error) {
        console.error("Error booking appointment:", error);
        toast.error(error.message);
      }
    }

    
  };

  useEffect(() => {
    fetchDocInfo();
  }, [doctors, docId]);

  useEffect(() => {
    if (docInfo) {
      getAvailableSlots();
    }
  }, [docInfo]);

  useEffect(() => {
    console.log(docSlots);
  }, [docSlots]);

  return (
    docInfo && (
      <div>
        {/* Doctor Details */}
        <div className="flex flex-col sm:flex-row gap-4">
          <div>
            <img
              className="bg-primary w-full sm:max-w-72 rounded-lg"
              src={docInfo.image}
              alt="Doctor"
            />
          </div>
          <div className="flex-1 border border-gray-400 rounded-lg p-8 py-7 bg-white">
            <p className="flex items-center gap-2 text-2xl font-medium text-gray-600">
              {docInfo.name}
              <img className="w-5" src={assets.verified_icon} alt="Verified" />
            </p>
            <div className="flex items-center gap-2 text-sm mt-1 text-gray-600">
              <p>
                {docInfo.degree} - {docInfo.speciality}
                <button className="py-0.5 px-2 border text-xs rounded-full">
                  {docInfo.experience}
                </button>
              </p>
            </div>
            <div>
              <p className="flex items-center gap-1 text-sm font-medium text-gray-600 mt-3">
                About <img src={assets.info_icon} alt="Info" />
              </p>
              <p className="text-sm text-gray-500 max-w-[700px] mt-1">{docInfo.about}</p>
            </div>
            <p className="text-gray-500 font-medium mt-4">
              Appointment fee: <span>{currentSymbol}{docInfo.fees}</span>
            </p>
          </div>
        </div>

        {/* Booking */}
        <div className="sm:ml-72 sm:pl-4 mt-4 font-medium text-gray-700">
          <p>Booking Slots</p>
          <div className="flex gap-3 items-center w-full overflow-x-scroll mt-4">
            {docSlots.length > 0 &&
              docSlots.map((item, index) =>
                item.length > 0 ? (
                  <div
                    onClick={() => setSlotIndex(index)}
                    className={`text-center py-6 min-w-16 rounded-full cursor-pointer ${
                      slotIndex === index ? `bg-primary text-white` : `border border-gray-200`
                    }`}
                    key={index}
                  >
                    <p>{daysOfWeek[item[0].dateTime.getDay()]}</p>
                    <p>{item[0].dateTime.getDate()}</p>
                  </div>
                ) : (
                  <p key={index}>No slots available for this day</p>
                )
              )}
          </div>
          <div className="flex items-center gap-3 w-full overflow-x-scroll mt-4">
            {docSlots.length > 0 &&
              docSlots[slotIndex]?.map((item, index) => (
                <p
                  onClick={() => setSlotTime(item.time)}
                  key={index}
                  className={`text-sm font-light flex-shrink-0 px-5 py-2 rounded-full cursor-pointer ${
                    item.time === slotTime
                      ? `bg-primary text-white`
                      : `text-gray-400 border border-gray-300`
                  }`}
                >
                  {item.time.toLowerCase()}
                </p>
              ))}
          </div>
          <button
            onClick={bookAppointment}
            className="bg-primary text-white text-sm font-light px-14 py-3 rounded-full my-6"
          >
            Book an Appointment
          </button>
        </div>

        {/* Related Doctors */}
        <RelatedDoctor docId={docId} speciality={docInfo.speciality} />
      </div>
    )
  );
};

export default Appointment;




/*import validator from 'validator'
import bcrypt from 'bcrypt'
import userModel from '../models/userModel.js'
import jwt from 'jsonwebtoken'
import {v2 as cloudinary} from 'cloudinary'
import doctorModel from '../models/doctorModel.js'
import apopointmentModel from '../models/appointmentModel.js'
import stripe, { Stripe } from 'stripe' 
//Api for registration

export const registerUser=async(req,res)=>{
   try{
       const {name,email,password}=req.body;
       if(!name || !password || !email){
            return res.json({success:false,message:"Missings Details"})
       }
       if(!validator.isEmail(email)){
            return res.json({success:false,message:"Enter a valid Email"})
       }
       if(password.length<8){
        return res.json({success:false,message:"Enter a Strong password"})
       }
       const salt=await bcrypt.genSalt(10);
       const hashedPassword=await bcrypt.hash(password,salt);

       const userData={
        name,
        email,
        password:hashedPassword,

       }

       const newUser=new userModel(userData);
       const user=await newUser.save()
       
       const token=jwt.sign({id:user._id},process.env.JWT_SECRET);
       res.json({success:true,token})
   }
   catch(error){
      console.log(error);
        res.json({success:false,message:error.message})
   }
}

export const loginUser=async(req,res)=>{
    try{
         const {email,password}=req.body;
         const user=await userModel.findOne({email})
         if(!user){
            return res.json({success:false,message:'User does not exist'})
         }
         const isMatch=await bcrypt.compare(password,user.password)
         if(isMatch){
            const token=jwt.sign({id:user._id},process.env.JWT_SECRET)
            res.json({success:true,token})
         }
         else{
            res.json({success:false,message:"Invalid Credentials"})
         }
    }
    catch(error){
        console.log(error);
        res.json({success:false,message:error.message})
    }
}

export const getProfile=async(req,res)=>{
   try{
       const {userId}=req.body;
       const userData=await userModel.findById(userId).select('-password')
       console.log(userData);
       res.json({success:true,userData})
   }
   catch(error){
       console.log(error)
       res.json({success:false,message:error.message})
   }
}
//Api for updating user profile
export const updateProfile=async(req,res)=>{
   try{
       const {userId,name,phone,address,dob,gender}=req.body
       const imageFile=req.file
       
       if(!name||!phone||!address||!dob||!gender){
            return res.json({success:false,message:"Data Missing"})
       }
       await userModel.findByIdAndUpdate(userId,{name,phone,address:JSON.parse(address),dob,gender})
       if(imageFile){
         // upload image to the cloudinary
         
         const imageUpload=await cloudinary.uploader.upload(imageFile.path,{resource_type:'image'})
         const imageURL=imageUpload.secure_url
         await userModel.findByIdAndUpdate(userId,{image:imageURL})
       }
       res.json({success:true,message:'profile updated'})
   }
   catch(error){
      console.log(error)
      res.json({success:false,message:error.message})
   }
}

//API to book appointment

export const bookAppointment=async(req,res)=>{
   try{
       const {userId,docId,slotDate,slotTime}=req.body;
       const docData=await doctorModel.findById(docId).select('-password')
       if(!docData.available){
         return res.json({success:false,message:"Doctor not available"})
       }
       let slots_booked=docData.slots_booked
       //Checking for slots availability
       if(slots_booked[slotDate]){
         if(slots_booked[slotDate].includes(slotTime)){
            return res.json({success:false,message:"Slot not available"})
         }
         else{
            slots_booked[slotDate].push(slotTime)
         }
       }
       else{
         slots_booked[slotDate]=[]
         slots_booked[slotDate].push(slotTime)
       }
       const userData=await userModel.findById(userId).select('-password')
       delete docData.slots_booked

       const appointmentData={
         userId,
         docId,
         userData,
         docData,
         amount:docData.fees,
         slotTime,
         slotDate,
         date:Date.now()
       }
       const newAppointment=new apopointmentModel(appointmentData)
       await newAppointment.save()
       //save new slots data in docData

       await doctorModel.findByIdAndUpdate(docId,{slots_booked})
       res.json({success:true,message:"Appointment Booked"})
   }
   catch(error){
      console.log(error)
      res.json({success:false,message:error.message})
   }
}

//API to get user appointmnets for frontend my-appointments page
export const listAppointment=async(req,res)=>{
   try{
      const {userId}=req.body
      const appointments=await apopointmentModel.find({userId});
      res.json({success:true,appointments})
   }
   catch(error){
      console.log(error)
      res.json({success:false,message:error.message})
   }
}

//API for cancel Appointments

export const cancelAppointment=async(req,res)=>{
   try{
       const {userId,appointmentId}=req.body;
       const appointmentData=await apopointmentModel.findById(appointmentId)
       if(appointmentData.userId!==userId){
         return res.json({success:false,message:"Unauthorized Action"})
       }
       await apopointmentModel.findByIdAndUpdate(appointmentId,{cancelled:true})
       //releasing doctor slot
       const {docId,slotDate,slotTime}=appointmentData
       const doctorData=await doctorModel.findById(docId)
       let slots_booked=doctorData.slots_booked
       slots_booked[slotDate]=slots_booked[slotDate].filter(e=>e!==slotTime)
       await doctorModel.findByIdAndUpdate(docId,{slots_booked})
       res.json({success:true,message:"Appointment cancelled"})
   }
   catch(error){
      console.log(error)
      res.json({success:false,message:error.message})
   }
}

//API to make payment of appointment using stripe

export const getCheckoutSession=async(req,res)=>{
   try{
        //get currently booked doctor
        const {userId,appointmentId}=req.body;
        const doctor=await doctorModel.findById(req.params.docId);
        const user=await userModel.findById(userId);
        const stripe=new Stripe("sk_test_51QYTHVP0RDsRihpJxertIz2MhkbCoO3iuYQQwdJQsok2QSlwb1fCi3Ws2GXhsMfaosMG8yj662MxyMT8QeQKEnxn00Ssodrkpq")

        //Create stripe checkout session
        const session=await stripe.checkout.session.create({
         payment_method_types:['card'],
         mode:'payment',
         success_url:`${process.env.FRONTEND_URL}/checkout-success`,
         cancel_url:`${req.protocol}://${req.get('host')}/appointment/${req.params.docId}`,
         customer_reference_id:req.params.docId,
         customer_email:user.email,
         line_items:[
            {
               price_data:{
                  currency:'bdt',
                  unit_amount:doctor.fees *100,
                  product_data:{
                     name:doctor.name,
                     description:doctor.about,
                     image:[doctor.image]
                  }
                
               },
               quantity:1,

            }
         ]

        })
   }
   
   catch(error){

   }
}
*/